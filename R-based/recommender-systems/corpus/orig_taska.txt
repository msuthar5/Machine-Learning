In object-oriented programming, inheritance is a way to form new classes (i
nstances of which are called objects) using classes that have already been 
defined. The inheritance concept was invented in 1967 for Simula.

The new classes, known as derived classes, take over (or inherit) attribute
s and behavior of the pre-existing classes, which are referred to as base c
lasses (or ancestor classes). It is intended to help reuse existing code wi
th little or no modification.

Inheritance provides the support for representation by categorization in co
mputer languages. Categorization is a powerful mechanism number of informat
ion processing, crucial to human learning by means of generalization (what 
is known about specific entities is applied to a wider group given a belong
s relation can be established) and cognitive economy (less information need
s to be stored about each specific entity, only its particularities).

Inheritance is also sometimes called generalization, because the is-a relat
ionships represent a hierarchy between classes of objects. For instance, a 
fruit is a generalization of apple, orange, mango and many others. 
One can consider fruit to be an abstraction of apple, orange, etc. Converse
ly, since apples are fruit (i.e., an apple is-a fruit), apples may naturall
y inherit all the properties common to all fruit, such as being a fleshy co
ntainer for the seed of a plant.

An advantage of inheritance is that modules with sufficiently similar inter
faces can share a lot of code, reducing the complexity of the program. Inhe
ritance therefore has another view, a dual, called polymorphism, which desc
ribes many pieces of code being controlled by shared control code.
Inheritance is typically accomplished either by overriding (replacing) one 
or more methods exposed by ancestor, or by adding new methods to those expo
sed by an ancestor.

Complex inheritance, or inheritance used within a design that is not suffic
iently mature, may lead to the Yo-yo problem.

