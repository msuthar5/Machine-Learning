In the field of computer science, term 'dynamic programming' relates to the
 style of programming that breaks a large problem down into smaller subprob
lems, and generally allows for the finding of the optimal solution. When th
e problem is split into subproblems, these themselves may be split into sma
ller problems, and so on, until they cannot be reduced any more.
It is also common for dynamic programming to make use of recursion, and the
 saving of previous results for faster computation later; this also leads t
o higher efficiency, as calculations are not being redone. For example, whe
n a problem is reduced into sub problems, and those are then reduced furthe
r, it may be that there are common subsubproblems, and so only one calculat
ion needs to be done and the result saved to help solve more than one subpr
oblem.
An example of this gain in efficiency is a path-finding problem. If there a
re two distinct routes in a network of 10 nodes, tagged A to J, then if the
 two routes share a common section (say, between nodes B and D), the cost o
f that section should be calculated for the first route and saved. Then, wh
en the second route is being processed, the cost of B to D does not need to
 be calculated again.
In general, dynamic programming is used on optimisation problems, where the
 most efficient solution is needed. Areas where this sort of programming is
 useful is in AI, computer graphics, compression routines, and biomedical a
pplications.

